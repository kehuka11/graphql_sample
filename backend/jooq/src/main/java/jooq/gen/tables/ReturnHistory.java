/*
 * This file is generated by jOOQ.
 */
package jooq.gen.tables;


import java.time.LocalDateTime;
import java.util.function.Function;

import jooq.gen.Keys;
import jooq.gen.Library;
import jooq.gen.tables.records.ReturnHistoryRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ReturnHistory extends TableImpl<ReturnHistoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>library.return_history</code>
     */
    public static final ReturnHistory RETURN_HISTORY = new ReturnHistory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ReturnHistoryRecord> getRecordType() {
        return ReturnHistoryRecord.class;
    }

    /**
     * The column <code>library.return_history.return_id</code>.
     */
    public final TableField<ReturnHistoryRecord, String> RETURN_ID = createField(DSL.name("return_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>library.return_history.book_id</code>.
     */
    public final TableField<ReturnHistoryRecord, String> BOOK_ID = createField(DSL.name("book_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>library.return_history.user_id</code>.
     */
    public final TableField<ReturnHistoryRecord, String> USER_ID = createField(DSL.name("user_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>library.return_history.return_datetime</code>.
     */
    public final TableField<ReturnHistoryRecord, LocalDateTime> RETURN_DATETIME = createField(DSL.name("return_datetime"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>library.return_history.created_at</code>.
     */
    public final TableField<ReturnHistoryRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>library.return_history.updated_at</code>.
     */
    public final TableField<ReturnHistoryRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>library.return_history.loan_id</code>.
     */
    public final TableField<ReturnHistoryRecord, String> LOAN_ID = createField(DSL.name("loan_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private ReturnHistory(Name alias, Table<ReturnHistoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private ReturnHistory(Name alias, Table<ReturnHistoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>library.return_history</code> table reference
     */
    public ReturnHistory(String alias) {
        this(DSL.name(alias), RETURN_HISTORY);
    }

    /**
     * Create an aliased <code>library.return_history</code> table reference
     */
    public ReturnHistory(Name alias) {
        this(alias, RETURN_HISTORY);
    }

    /**
     * Create a <code>library.return_history</code> table reference
     */
    public ReturnHistory() {
        this(DSL.name("return_history"), null);
    }

    public <O extends Record> ReturnHistory(Table<O> child, ForeignKey<O, ReturnHistoryRecord> key) {
        super(child, key, RETURN_HISTORY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Library.LIBRARY;
    }

    @Override
    public UniqueKey<ReturnHistoryRecord> getPrimaryKey() {
        return Keys.KEY_RETURN_HISTORY_PRIMARY;
    }

    @Override
    public ReturnHistory as(String alias) {
        return new ReturnHistory(DSL.name(alias), this);
    }

    @Override
    public ReturnHistory as(Name alias) {
        return new ReturnHistory(alias, this);
    }

    @Override
    public ReturnHistory as(Table<?> alias) {
        return new ReturnHistory(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ReturnHistory rename(String name) {
        return new ReturnHistory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ReturnHistory rename(Name name) {
        return new ReturnHistory(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ReturnHistory rename(Table<?> name) {
        return new ReturnHistory(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, String, String, LocalDateTime, LocalDateTime, LocalDateTime, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super String, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super String, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
